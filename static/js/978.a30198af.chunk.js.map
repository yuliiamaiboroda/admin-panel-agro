{"version":3,"file":"static/js/978.a30198af.chunk.js","mappings":"8KAOe,SAASA,EAAWC,GAAqC,IAAlCC,EAAOD,EAAPC,QAASC,EAAYF,EAAZE,aAC7C,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sJACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAAS,SAACC,GAAsC,OAAKN,GAAc,EAACE,SACrE,sCAIHC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAAS,SAACC,GAAsC,OAAKP,GAAS,EAACG,SAChE,kEAOX,C,4FC5BaK,EAAeC,EAAAA,QAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wOAIzB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAAM,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAC7C,SAAAC,GAAK,OAAIA,EAAMF,MAAMG,OAAOC,kBAAkB,IAC3C,SAAAF,GAAK,OAAIA,EAAMF,MAAMK,MAAMC,SAAS,GAE5CC,EAAAA,GAAAA,OAIAA,EAAAA,GAAAA,SAMEC,EAAQZ,EAAAA,QAAAA,GAASa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,+FACnB,SAAAI,GAAK,OAAIA,EAAMF,MAAMG,OAAOO,aAAa,IACrC,SAAAR,GAAK,OAAIA,EAAMF,MAAMW,UAAUC,EAAE,GAErCL,EAAAA,GAAAA,SACM,SAAAL,GAAK,OAAIA,EAAMF,MAAMW,UAAUE,GAAG,I,SCpBpC,SAASC,EAAS5B,GAAqB,IAAlB6B,EAAK7B,EAAL6B,MAClC,OACExB,EAAAA,EAAAA,KAACI,EAAY,CAAAL,UACXC,EAAAA,EAAAA,KAACiB,EAAK,CAAAlB,SAAEyB,KAGd,C,0MCaA,EAvB6BC,EAAAA,KAAaC,MAAM,CAC9CC,YAAaF,EAAAA,KACVG,WACAC,IAAI,EAAG,mSACPC,IAAI,GAAI,wRACRF,SAAS,oHACTG,QACC,uCACA,2bAEJC,YAAaP,EAAAA,KACZG,SAAS,oHACTC,IAAI,EAAG,mSACLC,IAAI,GAAI,wRACRC,QACC,uCACA,2bAEJE,gBAAiBR,EAAAA,KAChBG,SAAS,oHACTM,MAAM,CAACT,EAAAA,GAAQ,eAAgB,IAAK,uI,SCXxB,SAASU,EAAmBxC,GAAuB,IAApBC,EAAOD,EAAPC,QAC5CwC,GAAwDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhEI,EAAoBF,EAAA,GAAEG,EAAuBH,EAAA,GACpDI,GAAwDL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhEE,EAAoBD,EAAA,GAAEE,EAAuBF,EAAA,GACpDG,GACET,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GADVE,EAAwBD,EAAA,GAAEE,EAA2BF,EAAA,GAEtDG,GAAWC,EAAAA,EAAAA,MAQjB,OACEnD,EAAAA,EAAAA,KAACoD,EAAAA,GAAM,CACLC,cARiB,CACnB1B,YAAa,GACbK,YAAa,GACbC,gBAAiB,IAMfqB,iBAAkBC,EAClBC,SAAU,SAACC,EAAQC,GACjB,IAAQ/B,EAA6B8B,EAA7B9B,YAAaK,EAAgByB,EAAhBzB,YACrBkB,GAASS,EAAAA,EAAAA,IAAmB,CAAEhC,YAAAA,EAAaK,YAAAA,KAC3C0B,EAAQE,YACRhE,GACF,EAAEG,UAEFD,EAAAA,EAAAA,MAAC+D,EAAAA,GAAI,CAAA9D,SAAA,EACHD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,8EAELC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAK,CACJC,KAAK,cACL9D,KAAMuC,EAAuB,OAAS,WACtCwB,GAAG,iBAELhE,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAAS,kBAAMuC,GAAyBD,EAAqB,EAACzC,SAE7DyC,GAAuBxC,EAAAA,EAAAA,KAACiE,EAAAA,IAAW,KAAMjE,EAAAA,EAAAA,KAACkE,EAAAA,IAAS,OAEtDlE,EAAAA,EAAAA,KAACmE,EAAAA,GAAY,CAACJ,KAAK,oBAErB/D,EAAAA,EAAAA,KAAA,UACAF,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,wEAELC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAK,CACJC,KAAK,cACL9D,KAAM2C,EAAuB,OAAS,WACtCoB,GAAG,iBAELhE,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAAS,kBAAM2C,GAAyBD,EAAqB,EAAC7C,SAE7D6C,GAAuB5C,EAAAA,EAAAA,KAACiE,EAAAA,IAAW,KAAMjE,EAAAA,EAAAA,KAACkE,EAAAA,IAAS,OAEtDlE,EAAAA,EAAAA,KAACmE,EAAAA,GAAY,CAACJ,KAAK,oBAErB/D,EAAAA,EAAAA,KAAA,UACAF,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,2IAELC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAK,CACJC,KAAK,kBACL9D,KAAM+C,EAA2B,OAAS,WAC1CgB,GAAG,qBAELhE,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAAS,kBACP+C,GAA6BD,EAAyB,EACvDjD,SAEAiD,GAA2BhD,EAAAA,EAAAA,KAACiE,EAAAA,IAAW,KAAMjE,EAAAA,EAAAA,KAACkE,EAAAA,IAAS,OAE1DlE,EAAAA,EAAAA,KAACmE,EAAAA,GAAY,CAACJ,KAAK,wBAErB/D,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASC,QAASN,EAAQG,SAAC,oCAGxCC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,wFAI9B,C,cClFe,SAASqE,IACtB,IAAAhC,GAAkDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DiC,EAAiB/B,EAAA,GAAEgC,EAAoBhC,EAAA,GAC9CI,GAA0DL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlE6B,EAAqB5B,EAAA,GAAE6B,EAAwB7B,EAAA,GAChDO,GAAWC,EAAAA,EAAAA,MAIasB,GAA1BC,EAAAA,EAAAA,IAAeC,EAAAA,IADjBC,KAAQb,EAAIU,EAAJV,KAAMc,EAAOJ,EAAPI,QAASC,EAAIL,EAAJK,KAAMC,EAAKN,EAALM,MAG/B,OACEjF,EAAAA,EAAAA,MAAAkF,EAAAA,SAAA,CAAAjF,SAAA,EACEC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CAACC,MAAM,wGACjBxB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BACHD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CACGgE,EAAK,IAAEc,MAEV7E,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+BACF+E,IAAQ9E,EAAAA,EAAAA,KAAA,KAAAD,UAAIkF,EAAAA,EAAAA,GAAcC,EAAAA,GAAMJ,OACjC9E,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yGACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAIgF,KAEJjF,EAAAA,EAAAA,MAAA,UACEG,KAAK,SACLC,QAAS,SAACC,GAAsC,OAC9CqE,GAAyB,EAAK,EAC/BzE,SAAA,EAEDC,EAAAA,EAAAA,KAACmF,EAAAA,IAAe,IAAG,sFAEpBZ,IACCvE,EAAAA,EAAAA,KAACoF,EAAAA,EAAK,CAACxF,QAAS,kBAAM4E,GAAyB,EAAM,EAACzE,UACpDC,EAAAA,EAAAA,KAACmC,EAAmB,CAClBvC,QAAS,kBAAM4E,GAAyB,EAAM,OAIpD1E,EAAAA,EAAAA,MAAA,UACEG,KAAK,SACLC,QAAS,SAACC,GAAsC,OAC9CmE,GAAqB,EAAK,EAC3BvE,SAAA,EAEDC,EAAAA,EAAAA,KAACqF,EAAAA,IAAe,IAAG,6FAEpBhB,IACCrE,EAAAA,EAAAA,KAACoF,EAAAA,EAAK,CAACxF,QAAS,kBAAM0E,GAAqB,EAAM,EAACvE,UAChDC,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVE,QAAS,kBAAM0E,GAAqB,EAAM,EAC1CzE,aAAc,kBAAMqD,GAASoC,EAAAA,EAAAA,MAAa,QAMtD,C","sources":["components/ModalLogout/ModalLogout.tsx","components/PageTitle/PageTitle.styled.ts","components/PageTitle/PageTitle.tsx","helpers/schemas/auth/updatePassword.schema.ts","components/ModalChangePassword/ModalChangePassword.tsx","pages/ProfilePage/ProfilePage.tsx"],"sourcesContent":["import React from 'react';\n\ninterface IProps {\n  onClose: () => void;\n  handleLogout: () => void;\n}\n\nexport default function ModalLogout({ onClose, handleLogout }: IProps) {\n  return (\n    <div>\n      <h2>Ви впевнені, що хочете вийти?</h2>\n      <ul>\n        <li>\n          <button\n            type=\"button\"\n            onClick={(e: React.MouseEvent<HTMLButtonElement>) => handleLogout()}\n          >\n            вихід\n          </button>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            onClick={(e: React.MouseEvent<HTMLButtonElement>) => onClose()}\n          >\n            скасувати\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { devices } from 'helpers/constants';\nimport styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  height: 100px;\n  display: flex;\n  align-items: center;\n  padding: ${p => p.theme.space[6]}px ${p => p.theme.space[8]}px;\n  background: ${props => props.theme.colors.gradientBackground};\n  border-radius: ${props => props.theme.radii.pageTitle};\n  \n  @media ${devices.tablet} { \n    height: 150px;\n  }\n  \n  @media ${devices.desktop} { \n    height: 234px;\n  }\n\n`;\n\nexport const Title = styled.h1`\n  color: ${props => props.theme.colors.pageTitleText};\n  font-size: ${props => props.theme.fontSizes.xl}px;\n  \n  @media ${devices.desktop} { \n    font-size: ${props => props.theme.fontSizes.xxl}px;\n  }\n`;\n","import { Title, TitleWrapper } from './PageTitle.styled';\n\ninterface IProps {\n  title: string;\n}\n\nexport default function PageTitle({ title }: IProps) {\n  return (\n    <TitleWrapper>\n      <Title>{title}</Title>\n    </TitleWrapper>\n  );\n}\n","import * as Yup from 'yup';\n\nconst updatePasswordSchema = Yup.object().shape({\n  oldPassword: Yup.string()\n    .required()\n    .min(7, 'Пароль занадто короткий - має містити мінімум 7 символів.')\n    .max(32, 'Пароль занадто довгий - має містити максимум 32 символи.')\n    .required(\"Це поле є обов'язковим\")\n    .matches(\n      /^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$/,\n      'Пароль має містити лише: великі літери латиницею, маленькі літери латиницею та цифри'\n    ),\n  newPassword: Yup.string()\n  .required(\"Це поле є обов'язковим\")\n  .min(7, 'Пароль занадто короткий - має містити мінімум 7 символів.')\n    .max(32, 'Пароль занадто довгий - має містити максимум 32 символи.')\n    .matches(\n      /^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$/,\n      'Пароль має містити лише: великі літери латиницею, маленькі літери латиницею та цифри'\n    ),\n  confirmPassword: Yup.string()\n  .required(\"Це поле є обов'язковим\")\n  .oneOf([Yup.ref('newPassword'), ''], 'Паролі мають співпадати!'),\n});\n\nexport default updatePasswordSchema;\n","import { useState } from 'react';\nimport { useAppDispatch } from 'hooks';\nimport { RxEyeClosed, RxEyeOpen } from 'react-icons/rx';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { updatePasswordById } from 'redux/users';\nimport updatePasswordSchema from 'helpers/schemas/auth/updatePassword.schema';\n\ninterface IProps {\n  onClose: () => void;\n}\n\nexport default function ModalChangePassword({ onClose }: IProps) {\n  const [isVisibleOldPassword, setIsVisibleOldPassword] = useState(false);\n  const [isVisibleNewPassword, setIsVisibleNewPassword] = useState(false);\n  const [isVisibleConfirmPassword, setIsVisibleConfirmPassword] =\n    useState(false);\n  const dispatch = useAppDispatch();\n\n  const initialState = {\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialState}\n      validationSchema={updatePasswordSchema}\n      onSubmit={(values, actions) => {\n        const { oldPassword, newPassword } = values;\n        dispatch(updatePasswordById({ oldPassword, newPassword }));\n        actions.resetForm();\n        onClose();\n      }}\n    >\n      <Form>\n        <label>\n          Старий пароль:\n          <Field\n            name=\"oldPassword\"\n            type={isVisibleOldPassword ? 'text' : 'password'}\n            id=\"oldPassword\"\n          />\n          <button\n            type=\"button\"\n            onClick={() => setIsVisibleOldPassword(!isVisibleOldPassword)}\n          >\n            {isVisibleOldPassword ? <RxEyeClosed /> : <RxEyeOpen />}\n          </button>\n          <ErrorMessage name=\"oldPassword\" />\n        </label>\n        <br />\n        <label>\n          Новий пароль:\n          <Field\n            name=\"newPassword\"\n            type={isVisibleNewPassword ? 'text' : 'password'}\n            id=\"newPassword\"\n          />\n          <button\n            type=\"button\"\n            onClick={() => setIsVisibleNewPassword(!isVisibleNewPassword)}\n          >\n            {isVisibleNewPassword ? <RxEyeClosed /> : <RxEyeOpen />}\n          </button>\n          <ErrorMessage name=\"newPassword\" />\n        </label>\n        <br />\n        <label>\n          Підтвердити новий пароль:\n          <Field\n            name=\"confirmPassword\"\n            type={isVisibleConfirmPassword ? 'text' : 'password'}\n            id=\"confirmPassword\"\n          />\n          <button\n            type=\"button\"\n            onClick={() =>\n              setIsVisibleConfirmPassword(!isVisibleConfirmPassword)\n            }\n          >\n            {isVisibleConfirmPassword ? <RxEyeClosed /> : <RxEyeOpen />}\n          </button>\n          <ErrorMessage name=\"confirmPassword\" />\n        </label>\n        <br />\n        <button type=\"button\" onClick={onClose}>\n          Назад\n        </button>\n        <button type=\"submit\">Змінити пароль</button>\n      </Form>\n    </Formik>\n  );\n}\n","import { useAppSelector, useAppDispatch } from 'hooks';\nimport { logoutUser, selectUser } from 'redux/user';\nimport { AiOutlineLogout, AiOutlineReload } from 'react-icons/ai';\nimport { useState } from 'react';\nimport { Roles } from 'helpers/constants';\nimport Modal from 'components/Modal/Modal';\nimport ModalLogout from 'components/ModalLogout/ModalLogout';\nimport translateRole from 'utils/translate-role';\nimport ModalChangePassword from 'components/ModalChangePassword';\nimport PageTitle from 'components/PageTitle';\n\nexport default function ProfilePage() {\n  const [isLogoutModalOpen, setIsLogoutModalOpen] = useState(false);\n  const [isChangePassModalOpen, setIsChangePassModalOpen] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const {\n    user: { name, surname, role, email },\n  } = useAppSelector(selectUser);\n\n  return (\n    <>\n      <PageTitle title='Ваші особисті дані'/>\n      <b>Ім'я :</b>\n      <p>\n        {name} {surname}\n      </p>\n      <b>Роль: </b>\n      {role && <p>{translateRole(Roles[role])}</p>}\n      <b>Електронна адреса: </b>\n      <p>{email}</p>\n\n      <button\n        type=\"button\"\n        onClick={(e: React.MouseEvent<HTMLButtonElement>) =>\n          setIsChangePassModalOpen(true)\n        }\n      >\n        <AiOutlineReload /> Змінити пароль\n      </button>\n      {isChangePassModalOpen && (\n        <Modal onClose={() => setIsChangePassModalOpen(false)}>\n          <ModalChangePassword\n            onClose={() => setIsChangePassModalOpen(false)}\n          />\n        </Modal>\n      )}\n      <button\n        type=\"button\"\n        onClick={(e: React.MouseEvent<HTMLButtonElement>) =>\n          setIsLogoutModalOpen(true)\n        }\n      >\n        <AiOutlineLogout /> Вийти з аккаунту\n      </button>\n      {isLogoutModalOpen && (\n        <Modal onClose={() => setIsLogoutModalOpen(false)}>\n          <ModalLogout\n            onClose={() => setIsLogoutModalOpen(false)}\n            handleLogout={() => dispatch(logoutUser())}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"names":["ModalLogout","_ref","onClose","handleLogout","_jsxs","children","_jsx","type","onClick","e","TitleWrapper","styled","_templateObject","_taggedTemplateLiteral","p","theme","space","props","colors","gradientBackground","radii","pageTitle","devices","Title","_templateObject2","pageTitleText","fontSizes","xl","xxl","PageTitle","title","Yup","shape","oldPassword","required","min","max","matches","newPassword","confirmPassword","oneOf","ModalChangePassword","_useState","useState","_useState2","_slicedToArray","isVisibleOldPassword","setIsVisibleOldPassword","_useState3","_useState4","isVisibleNewPassword","setIsVisibleNewPassword","_useState5","_useState6","isVisibleConfirmPassword","setIsVisibleConfirmPassword","dispatch","useAppDispatch","Formik","initialValues","validationSchema","updatePasswordSchema","onSubmit","values","actions","updatePasswordById","resetForm","Form","Field","name","id","RxEyeClosed","RxEyeOpen","ErrorMessage","ProfilePage","isLogoutModalOpen","setIsLogoutModalOpen","isChangePassModalOpen","setIsChangePassModalOpen","_useAppSelector$user","useAppSelector","selectUser","user","surname","role","email","_Fragment","translateRole","Roles","AiOutlineReload","Modal","AiOutlineLogout","logoutUser"],"sourceRoot":""}