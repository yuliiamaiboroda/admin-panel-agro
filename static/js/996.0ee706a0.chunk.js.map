{"version":3,"file":"static/js/996.0ee706a0.chunk.js","mappings":"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","sources":["components/PageTitle/PageTitle.styled.ts","components/PageTitle/PageTitle.tsx","helpers/schemas/auth/createNewUser.schema.ts","components/UserCreateForm/UserCreateForm.tsx","components/UserCard/UserCard.tsx","components/UsersList/UsersList.tsx","components/UsersDashboard/UsersDashboard.tsx","pages/UsersPage/UsersPage.tsx"],"sourcesContent":["import { devices } from 'helpers/constants';\nimport styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  height: 100px;\n  display: flex;\n  align-items: center;\n  padding: ${p => p.theme.space[6]}px ${p => p.theme.space[8]}px;\n  background: ${props => props.theme.colors.primaryGradient};\n  border-radius: ${props => props.theme.radii.pageTitle};\n  box-shadow: ${p => p.theme.shadows.card};\n\n  @media ${devices.tablet} {\n    height: 150px;\n  }\n\n  @media ${devices.desktop} {\n    height: 234px;\n  }\n`;\n\nexport const Title = styled.h1`\n  color: ${props => props.theme.colors.accentText};\n  font-size: ${props => props.theme.fontSizes.xl};\n\n  @media ${devices.desktop} {\n    font-size: ${props => props.theme.fontSizes.xxl};\n  }\n`;\n","import { Title, TitleWrapper } from './PageTitle.styled';\nimport { useEffect } from 'react';\n\ninterface IProps {\n  title: string;\n}\n\nexport default function PageTitle({ title }: IProps) {\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  return (\n    <TitleWrapper>\n      <Title>{title}</Title>\n    </TitleWrapper>\n  );\n}\n","import * as Yup from 'yup';\nimport { Roles, USER_ROLES } from 'helpers/constants';\n\nconst createNewUserSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(\n      10,\n      'Електронна пошта занадто коротка - має містити мінімум 10 символів.'\n    )\n    .max(\n      63,\n      'Електронна пошта занадто довга - має містити максимум 63 символів.'\n    )\n    .email('Невалідна пошта')\n    .matches(\n      /^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(.\\w{2,3})+$/,\n      'Будь ласка введіть валідну адресу електронної пошти'\n    )\n    .required(\"Електронна пошта є обов'язковим полем\"),\n  password: Yup.string()\n    .min(7, 'Пароль занадто короткий - має містити мінімум 7 символів.')\n    .max(32, 'Пароль занадтно довгий - має містити максимум 32 символи.')\n    .matches(\n      /^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$/,\n      'Пароль має містити лише: великі літери, маленькі літери та цифри'\n    )\n    .required(\"Пароль є обов'язковим полем\"),\n  confirmPassword: Yup.string().oneOf(\n    [Yup.ref('password'), ''],\n    'Паролі мають співпадати!'\n  ),\n  name: Yup.string()\n    .min(2, \"Ім'я занадто коротке - має містити мінімум 2 символи\")\n    .max(30, \"Ім'я занадтно довге - має містити максимум 30 символів\")\n    .matches(/^([a-zA-Z-А-Яа-яЁёЇїІіЄєҐґ']+)$/, \"Ім'я має містити лише літери\")\n    .required(\"Ім'я є обов'язковим полем\"),\n  surname: Yup.string()\n    .min(2, 'Прізвище занадто коротке - має містити мінімум 2 символів')\n    .max(40, 'Прізвище занадтно довге - має містити максимум 40 символів')\n    .matches(\n      /^([a-zA-Z-А-Яа-яЁёЇїІіЄєҐґ']+)$/,\n      'Прізвище має містити лише літери'\n    )\n    .required(\"Прізвище є обов'язковим полем\"),\n  role: Yup.mixed<Roles>()\n    .oneOf(USER_ROLES)\n    .required(\"Роль нового користувача є обов'язковим полем\"),\n});\n\nexport default createNewUserSchema;\n","import { Form, Formik, ErrorMessage } from 'formik';\nimport createNewUserSchema from 'helpers/schemas/auth/createNewUser.schema';\nimport { useAppDispatch } from 'hooks';\nimport { registerNewUser } from 'redux/users';\nimport { listUsersOptions } from 'helpers/constants';\nimport { useState } from 'react';\nimport { RxEyeClosed, RxEyeOpen } from 'react-icons/rx';\nimport FormField from 'components/FormField';\nimport Box from 'components/Box';\nimport { Button } from 'helpers/styles';\nimport DropDown from 'components/DropDown';\nimport FormButtons from 'components/FormButtons/FormButtons';\n\ninterface INewUser {\n  email: string;\n  password: string;\n  name: string;\n  surname: string;\n  role: string;\n}\n\ninterface Iprops {\n  onClose: () => void;\n}\n\nconst FORM_INITIAL_STATE: INewUser = {\n  email: '',\n  password: '',\n  name: '',\n  surname: '',\n  role: '',\n};\n\nexport default function CreateUserForm({ onClose }: Iprops) {\n  const [isVisiblePassword, setIsVisiblePassword] = useState(false);\n  const [isVisibleConfirmPassword, setIsVisibleConfirmPassword] =\n    useState(false);\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <h2>Cтворити нового користувача</h2>\n      <div style={{ margin: '14px auto' }}>\n        <Formik\n          initialValues={FORM_INITIAL_STATE}\n          onSubmit={(values, actions) => {\n            dispatch(registerNewUser(values));\n            actions.resetForm();\n            onClose();\n          }}\n          validateOnBlur\n          validationSchema={createNewUserSchema}\n        >\n          {({ handleSubmit, setFieldValue }) => (\n            <Form\n              style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}\n            >\n              <FormField\n                labelName=\"Електронна пошта:\"\n                fieldName=\"email\"\n                placeholderName=\" Електронна пошта\"\n                typeName=\"email\"\n              />\n              <Box position=\"relative\" width=\"100%\">\n                <FormField\n                  labelName=\"Пароль:\"\n                  fieldName=\"password\"\n                  placeholderName=\"Пароль\"\n                  typeName={isVisiblePassword ? 'text' : 'password'}\n                />\n                <Button\n                  type=\"button\"\n                  position=\"absolute\"\n                  right=\"0\"\n                  bottom=\"0\"\n                  onClick={(e: React.MouseEvent<HTMLButtonElement>) =>\n                    setIsVisiblePassword(!isVisiblePassword)\n                  }\n                  variant=\"content\"\n                >\n                  {isVisiblePassword ? (\n                    <RxEyeClosed size={22} />\n                  ) : (\n                    <RxEyeOpen size={22} />\n                  )}\n                </Button>\n              </Box>\n              <Box position=\"relative\" width=\"100%\">\n                <FormField\n                  labelName=\"Підтвердіть пароль:\"\n                  fieldName=\"confirmPassword\"\n                  placeholderName=\"Підтвердіть пароль\"\n                  typeName={isVisibleConfirmPassword ? 'text' : 'password'}\n                />\n                <Button\n                  type=\"button\"\n                  position=\"absolute\"\n                  right=\"0\"\n                  bottom=\"0\"\n                  onClick={(e: React.MouseEvent<HTMLButtonElement>) =>\n                    setIsVisibleConfirmPassword(!isVisibleConfirmPassword)\n                  }\n                  variant=\"content\"\n                >\n                  {isVisibleConfirmPassword ? (\n                    <RxEyeClosed size={22} />\n                  ) : (\n                    <RxEyeOpen size={22} />\n                  )}\n                </Button>\n              </Box>\n              <FormField\n                labelName=\"Ім'я:\"\n                fieldName=\"name\"\n                placeholderName=\"Ім'я\"\n              />\n              <FormField\n                labelName=\"Прізвище:\"\n                fieldName=\"surname\"\n                placeholderName=\"Прізвище\"\n              />\n              <label\n                style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}\n              >\n                Роль нового користувача\n                <DropDown\n                  options={listUsersOptions}\n                  setFieldValue={setFieldValue}\n                />\n                <ErrorMessage name=\"role\" />\n              </label>\n              <FormButtons\n                onCancel={onClose}\n                onSubmit={handleSubmit}\n                submitButtonText=\"Створити\"\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </>\n  );\n}\n","import type { IUser } from 'redux/users';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CardWrapperMarkup from 'components/CardWrapperMarkup';\nimport CardTitleStringMarkup from 'components/CardTitleStringMarkup';\nimport CardDetailStringMarkup from 'components/CardDetailStringMarkup';\nimport ItemLink from 'components/ItemLink';\nimport Box from 'components/Box';\nimport { Roles } from 'helpers/constants';\nimport translateRole from 'utils/translate-role';\n\nexport default function UserCard({ _id, email, name, surname, role }: IUser) {\n  const navigate = useNavigate();\n  const routeLocation = useLocation();\n\n  const clickHandler = (event: React.MouseEvent) => {\n    if (!(event.target instanceof HTMLAnchorElement)) {\n      navigate(`${_id}`, { state: { from: routeLocation } });\n    }\n    return;\n  };\n\n  return (\n    <CardWrapperMarkup onClick={() => clickHandler}>\n      <CardTitleStringMarkup\n        title=\"Користувач\"\n        value={name}\n        additionalValue={surname}\n      />\n      <CardDetailStringMarkup title=\"Пошта\" value={email} />\n      <CardDetailStringMarkup title=\"Роль\" value={translateRole(Roles[role])} />\n      <Box display=\"flex\" justifyContent=\"center\" gridGap={2}>\n        <ItemLink\n          type=\"edit\"\n          navigateTo={`${_id}/form`}\n          state={{ from: routeLocation }}\n        />\n        <ItemLink\n          type=\"remove\"\n          navigateTo={`${_id}/confirm`}\n          state={{ from: routeLocation }}\n        />\n      </Box>\n    </CardWrapperMarkup>\n  );\n}\n","import UserCard from 'components/UserCard';\nimport type { IUser } from 'redux/users';\nimport GalleryWrapper from 'components/GalleryWrapper';\n\ninterface IProps {\n  usersList: IUser[];\n}\n\nexport default function UsersList({ usersList }: IProps) {\n  return (\n    <GalleryWrapper>\n      {usersList.map(item => (\n        <UserCard key={item._id} {...item} />\n      ))}\n    </GalleryWrapper>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { getAllUsers } from 'redux/users/operations';\nimport { selectUsersList } from 'redux/users';\nimport Modal from 'components/Modal';\nimport CreateUserForm from 'components/UserCreateForm';\nimport CreateButton from 'components/CreateButton';\nimport CardPlaceholder from 'components/CardPlaceholder';\nimport GalleryWrapper from 'components/GalleryWrapper';\nimport UsersList from 'components/UsersList';\n\nexport default function UsersDashboard() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useAppDispatch();\n  const { entities } = useAppSelector(selectUsersList);\n\n  useEffect(() => {\n    dispatch(getAllUsers());\n  }, [dispatch]);\n\n  return (\n    <section>\n      {entities?.length ? (\n        <UsersList usersList={entities} />\n      ) : (\n        <GalleryWrapper>\n          <CardPlaceholder />\n        </GalleryWrapper>\n      )}\n\n      <CreateButton onClick={() => setIsModalOpen(true)} />\n      <Modal isModalOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <CreateUserForm onClose={() => setIsModalOpen(false)} />\n      </Modal>\n    </section>\n  );\n}\n","import { Outlet } from 'react-router-dom';\nimport PageTitle from 'components/PageTitle';\nimport UsersDashboard from 'components/UsersDashboard';\n\nexport default function UsersPage() {\n  return (\n    <>\n      <PageTitle title=\"Користувачі\" />\n      <UsersDashboard />\n      <Outlet />\n    </>\n  );\n}\n"],"names":["TitleWrapper","styled","_templateObject","_taggedTemplateLiteral","p","theme","space","props","colors","primaryGradient","radii","pageTitle","shadows","card","devices","Title","_templateObject2","accentText","fontSizes","xl","xxl","PageTitle","_ref","title","useEffect","document","_jsx","children","Yup","shape","email","min","max","matches","required","password","confirmPassword","oneOf","name","surname","role","USER_ROLES","FORM_INITIAL_STATE","CreateUserForm","onClose","_useState","useState","_useState2","_slicedToArray","isVisiblePassword","setIsVisiblePassword","_useState3","_useState4","isVisibleConfirmPassword","setIsVisibleConfirmPassword","dispatch","useAppDispatch","_jsxs","_Fragment","style","margin","Formik","initialValues","onSubmit","values","actions","registerNewUser","resetForm","validateOnBlur","validationSchema","createNewUserSchema","_ref2","handleSubmit","setFieldValue","Form","display","flexDirection","gap","FormField","labelName","fieldName","placeholderName","typeName","Box","position","width","Button","type","right","bottom","onClick","e","variant","RxEyeClosed","size","RxEyeOpen","DropDown","options","listUsersOptions","ErrorMessage","FormButtons","onCancel","submitButtonText","UserCard","_id","navigate","useNavigate","routeLocation","useLocation","clickHandler","event","target","HTMLAnchorElement","concat","state","from","CardWrapperMarkup","CardTitleStringMarkup","value","additionalValue","CardDetailStringMarkup","translateRole","Roles","justifyContent","gridGap","ItemLink","navigateTo","UsersList","usersList","GalleryWrapper","map","item","_objectSpread","UsersDashboard","isModalOpen","setIsModalOpen","entities","useAppSelector","selectUsersList","getAllUsers","length","CardPlaceholder","CreateButton","Modal","UsersPage","Outlet"],"sourceRoot":""}