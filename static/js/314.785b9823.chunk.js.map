{"version":3,"file":"static/js/314.785b9823.chunk.js","mappings":"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","sources":["components/PageTitle/PageTitle.styled.ts","components/PageTitle/PageTitle.tsx","components/ResumeCard/ResumeCard.tsx","components/LoadMoreButton/LoadMoreButton.tsx","components/ResumesGallery/ResumesGallery.tsx","helpers/schemas/resumes/index.ts","components/ResumeForm/ResumeForm.tsx","components/ResumesFilter/ResumesFilter.tsx","pages/ResumesPage/ResumesPage.tsx"],"sourcesContent":["import { devices } from 'helpers/constants';\nimport styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  height: 100px;\n  display: flex;\n  align-items: center;\n  padding: ${p => p.theme.space[6]}px ${p => p.theme.space[8]}px;\n  background: ${props => props.theme.colors.primaryGradient};\n  border-radius: ${props => props.theme.radii.pageTitle};\n\n  @media ${devices.tablet} {\n    height: 150px;\n  }\n\n  @media ${devices.desktop} {\n    height: 234px;\n  }\n`;\n\nexport const Title = styled.h1`\n  color: ${props => props.theme.colors.accentText};\n  font-size: ${props => props.theme.fontSizes.xl};\n\n  @media ${devices.desktop} {\n    font-size: ${props => props.theme.fontSizes.xxl};\n  }\n`;\n","import { Title, TitleWrapper } from './PageTitle.styled';\n\ninterface IProps {\n  title: string;\n}\n\nexport default function PageTitle({ title }: IProps) {\n  return (\n    <TitleWrapper>\n      <Title>{title}</Title>\n    </TitleWrapper>\n  );\n}\n","import { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppDispatch } from 'hooks';\nimport { updateResumeViews, updateResumeIsFavorite } from 'redux/resumes';\nimport type { IResumeEntity } from 'helpers/types';\nimport CardWrapperMarkup from 'components/CardWrapperMarkup';\nimport CardTitleStringMarkup from 'components/CardTitleStringMarkup';\nimport CardDetailStringMarkup from 'components/CardDetailStringMarkup';\nimport ItemLink from 'components/ItemLink';\nimport Box from 'components/Box';\nimport FavoriteButton from 'components/FavoriteButton';\n\nexport default function ResumeCard({\n  _id,\n  name,\n  position,\n  comment,\n  isFavorite,\n  isReviewed,\n}: IResumeEntity) {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n\n  const handleUpdateViews = () => {\n    if (!isReviewed) {\n      dispatch(updateResumeViews(_id));\n    }\n  };\n\n  const clickHandler = (event: React.MouseEvent) => {\n    if (\n      !(event.target instanceof HTMLAnchorElement) &&\n      !(event.target instanceof HTMLButtonElement)\n    ) {\n      handleUpdateViews();\n      navigate(`${_id}${location.search}`, { state: location });\n    }\n    return;\n  };\n\n  return (\n    <CardWrapperMarkup onClick={() => clickHandler}>\n      {!isReviewed && <CardDetailStringMarkup value=\"New!!!\" />}\n      <CardTitleStringMarkup value={name} />\n      <CardDetailStringMarkup title=\"Позиція\" value={position} />\n      <CardDetailStringMarkup title=\"Коментар\" value={comment} />\n      <Box display=\"flex\" justifyContent=\"center\" gridGap={2}>\n        <FavoriteButton\n          isFavorite={isFavorite}\n          onClick={() => dispatch(updateResumeIsFavorite(_id))}\n        />\n        <ItemLink type=\"remove\" navigateTo={`${_id}/confirm`} />\n      </Box>\n    </CardWrapperMarkup>\n  );\n}\n","import { Button } from 'helpers/styles';\n\ninterface IProps {\n  onClick: () => void;\n}\nexport default function LoadMoreButton({ onClick }: IProps) {\n  return (\n    <Button variant=\"primary\" type=\"button\" onClick={onClick} mx=\"auto\">\n      Показати ще\n    </Button>\n  );\n}\n","import { useAppSelector, useAppDispatch, useQueryParams } from 'hooks';\nimport {\n  selectResumes,\n  selectResumePagination,\n  loadMoreResumes,\n} from 'redux/resumes';\nimport ResumeCard from 'components/ResumeCard';\nimport GalleryWrapper from 'components/GalleryWrapper';\nimport LoadMoreButton from 'components/LoadMoreButton';\nimport CardPlaceholder from 'components/CardPlaceholder';\n\nexport default function ResumesGallery() {\n  const [queryParams] = useQueryParams();\n  const resumes = useAppSelector(selectResumes);\n  const pagination = useAppSelector(selectResumePagination);\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <GalleryWrapper>\n        {resumes.length ? (\n          resumes.map(resume => <ResumeCard key={resume._id} {...resume} />)\n        ) : (\n          <CardPlaceholder />\n        )}\n      </GalleryWrapper>\n      {resumes.length < pagination.total ? (\n        <LoadMoreButton\n          onClick={() =>\n            dispatch(\n              loadMoreResumes({\n                ...queryParams,\n                skip: pagination.skip + pagination.limit,\n              })\n            )\n          }\n        />\n      ) : null}\n    </>\n  );\n}\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { fileFormat, fileSize } from 'utils';\n\nexport const resumeShema = (fileField: React.RefObject<HTMLInputElement>) =>\n  Yup.object({\n    name: Yup.string().trim().min(2).max(62).required(),\n    phone: Yup.string()\n      .trim()\n      .matches(\n        /^\\+380\\d{9}$/,\n        'Phone should containe +380 and another 9 numbers'\n      )\n      .required(),\n    email: Yup.string()\n      .trim()\n      .matches(\n        /^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(.\\w{2,3})+$/,\n        'Поле електронної пошти повинно містити тільки: латинські літери, цифри та знаки, на початку або в кінці електронної пошти не може бути дефіс, перед (@) повинно бути не менше 2 символів.'\n      )\n      .required(),\n    position: Yup.string()\n      .trim()\n      // TODO:  discus about validation of position field\n      .matches(\n        /^(?![-' ]+$)[a-zA-Zа-яА-ЯіІїЇєЄ0-9-'‘ʼ,./ ]+$/,\n        'Поле позиції повинно містити тільки: латинські літери, цифри, дефіси та апостроф'\n      )\n      .min(2)\n      .max(62)\n      .required(),\n    resume: Yup.mixed()\n      .test(\n        'is-corrent-forat',\n        'Резюме повине буди в форматі pdf',\n        fileFormat(fileField, ['pdf'])\n      )\n      .test(\n        'is-correct-size',\n        'Розмір файлу не повинен перевищувати 5Mb',\n        fileSize(fileField, 5)\n      ),\n    comment: Yup.string().trim().min(2).max(2000).required(),\n    agreement: Yup.bool()\n      .oneOf([true], 'Agreement should be checked')\n      .required(),\n  });\n","import { useRef, useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { createResume } from 'redux/resumes';\nimport { getAllVacancyTitles, selectVacancyTitles } from 'redux/vacancies';\nimport { resumeShema } from 'helpers/schemas/resumes';\nimport UploadFileField from 'components/UploadFileField';\n\ninterface IProps {\n  onSubmit?: () => void;\n}\n\nexport default function ResumeForm({ onSubmit }: IProps) {\n  const fileField = useRef<HTMLInputElement>(null);\n  const vacancies = useAppSelector(selectVacancyTitles);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getAllVacancyTitles());\n  }, [dispatch]);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '+380',\n        email: '',\n        position: '',\n        resume: '',\n        comment: '',\n        agreement: false,\n      }}\n      validationSchema={resumeShema(fileField)}\n      onSubmit={(\n        { name, phone, email, position, comment, agreement },\n        action\n      ) => {\n        dispatch(\n          createResume({\n            name,\n            phone,\n            email,\n            position,\n            comment,\n            agreement,\n            resume: fileField.current?.files\n              ? fileField.current?.files[0]\n              : null,\n          })\n        );\n        action.resetForm();\n        if (onSubmit) {\n          onSubmit();\n        }\n      }}\n    >\n      {({ values, setFieldValue }) => (\n        <Form>\n          <label>\n            Name: <Field id=\"name\" name=\"name\" type=\"text\" />\n            <ErrorMessage name=\"name\" />\n          </label>\n          <br />\n          <label>\n            Phone: <Field id=\"phone\" name=\"phone\" type=\"text\" />\n            <ErrorMessage name=\"phone\" />\n          </label>\n          <br />\n          <label>\n            Email: <Field id=\"email\" name=\"email\" type=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n          <br />\n          <label>\n            Position:\n            <select\n              name=\"position\"\n              id=\"position\"\n              value={values.position}\n              onChange={event => setFieldValue('position', event.target.value)}\n            >\n              <option value=\"\">Оберіть вакансію</option>\n              {vacancies.map(({ _id, title }) => (\n                <option key={_id} value={title}>\n                  {title}\n                </option>\n              ))}\n              <option value=\"other\">Інше</option>\n            </select>\n            <ErrorMessage name=\"position\" />\n          </label>\n          <br />\n          <UploadFileField name=\"resume\" fileRef={fileField} />\n          <br />\n          <label>\n            Comment: <Field id=\"comment\" name=\"comment\" type=\"text\" />\n            <ErrorMessage name=\"comment\" />\n          </label>\n          <br />\n          <label>\n            Agreement: <Field id=\"agreement\" name=\"agreement\" type=\"checkbox\" />\n            <ErrorMessage name=\"agreement\" />\n          </label>\n          <br />\n          <button type=\"submit\" disabled={!values.agreement}>\n            Add resume\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector, useQueryParams } from 'hooks';\nimport { getAllResumes } from 'redux/resumes';\nimport { getAllVacancyTitles, selectVacancyTitles } from 'redux/vacancies';\n\nconst LIMIT = [\n  { value: '2', label: 2 },\n  { value: '5', label: 5 },\n  { value: '10', label: 10 },\n  { value: '15', label: 15 },\n  { value: '', label: 20 },\n  { value: '25', label: 25 },\n  { value: '30', label: 30 },\n  { value: '40', label: 40 },\n  { value: '50', label: 50 },\n];\n\nexport default function ResumesFilter() {\n  const [queryParams, setQueryParams] = useQueryParams();\n  const titles = useAppSelector(selectVacancyTitles);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getAllVacancyTitles());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(getAllResumes(queryParams));\n  }, [dispatch, queryParams]);\n\n  return (\n    <>\n      <label>\n        Show favorites\n        <input\n          type=\"checkbox\"\n          name=\"isFavorite\"\n          checked={queryParams.isFavorite ? true : false}\n          onChange={({ target }) =>\n            setQueryParams({ isFavorite: target.checked ? 'true' : '' })\n          }\n        />\n      </label>\n      <select\n        onChange={({ target }) => setQueryParams({ position: target.value })}\n        value={queryParams.position ? queryParams.position : ''}\n      >\n        <option value=\"\">All</option>\n        {titles.map(({ _id, title }) => (\n          <option key={_id} value={title}>\n            {title}\n          </option>\n        ))}\n        <option value=\"other\">Other</option>\n      </select>\n      <select\n        onChange={({ target }) => setQueryParams({ sort: target.value })}\n        value={queryParams.sort ? queryParams.sort : ''}\n      >\n        <option value=\"\">Newer</option>\n        <option value=\"asc\">Older</option>\n      </select>\n      <select\n        onChange={({ target }) => setQueryParams({ limit: target.value })}\n        value={queryParams.limit ? queryParams.limit : ''}\n      >\n        {LIMIT.map(({ value, label }, index) => (\n          <option key={index} value={value}>\n            {label}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n}\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { useAppSelector, useModal } from 'hooks';\nimport { selectResumeError } from 'redux/resumes';\nimport ResumesGallery from 'components/ResumesGallery';\nimport Modal from 'components/Modal';\nimport ResumeForm from 'components/ResumeForm';\nimport ResumesFilter from 'components/ResumesFilter';\nimport Loader from 'components/Loader';\nimport PageTitle from 'components/PageTitle';\nimport CreateButton from 'components/CreateButton';\n\nexport default function ResumesPage() {\n  const { isModalOpen, openModal, closeModal } = useModal();\n  const error = useAppSelector(selectResumeError);\n\n  if (error) {\n    Notify.failure(error);\n    return (\n      <>\n        <h1>Resumes page</h1>\n        <h2>Ooops... Something went wrong</h2>\n        <h3>It seems like: {error}</h3>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <PageTitle title=\"Резюме\" />\n      <ResumesFilter />\n      <CreateButton onClick={openModal} />\n      <ResumesGallery />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <ResumeForm onSubmit={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"names":["TitleWrapper","styled","_templateObject","_taggedTemplateLiteral","p","theme","space","props","colors","primaryGradient","radii","pageTitle","devices","Title","_templateObject2","accentText","fontSizes","xl","xxl","PageTitle","_ref","title","_jsx","children","ResumeCard","_id","name","position","comment","isFavorite","isReviewed","navigate","useNavigate","dispatch","useAppDispatch","location","useLocation","clickHandler","event","target","HTMLAnchorElement","HTMLButtonElement","updateResumeViews","concat","search","state","_jsxs","CardWrapperMarkup","onClick","CardDetailStringMarkup","value","CardTitleStringMarkup","Box","display","justifyContent","gridGap","FavoriteButton","updateResumeIsFavorite","ItemLink","type","navigateTo","LoadMoreButton","Button","variant","mx","ResumesGallery","_useQueryParams","useQueryParams","queryParams","_slicedToArray","resumes","useAppSelector","selectResumes","pagination","selectResumePagination","_Fragment","GalleryWrapper","length","map","resume","_objectSpread","CardPlaceholder","total","loadMoreResumes","skip","limit","resumeShema","fileField","Yup","trim","min","max","required","phone","matches","email","test","fileFormat","fileSize","agreement","oneOf","ResumeForm","onSubmit","useRef","vacancies","selectVacancyTitles","useEffect","getAllVacancyTitles","Formik","initialValues","validationSchema","_ref2","action","_fileField$current","_fileField$current2","createResume","current","files","resetForm","_ref3","values","setFieldValue","Form","Field","id","ErrorMessage","onChange","_ref4","UploadFileField","fileRef","disabled","LIMIT","label","ResumesFilter","_useQueryParams2","setQueryParams","titles","getAllResumes","checked","sort","_ref5","_ref6","index","ResumesPage","_useModal","useModal","isModalOpen","openModal","closeModal","error","selectResumeError","Notify","CreateButton","Suspense","fallback","Loader","Outlet","Modal","onClose"],"sourceRoot":""}