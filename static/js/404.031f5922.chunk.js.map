{"version":3,"file":"static/js/404.031f5922.chunk.js","mappings":"mQAce,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAA6BC,EAAAA,EAAAA,IAAeC,EAAAA,IAApCC,EAASH,EAATG,UAAWC,EAAKJ,EAALI,MACnBC,GAAoCC,EAAAA,EAAAA,KAAS,GAArCC,EAAWF,EAAXE,YAAaC,EAAUH,EAAVG,WAEfC,EAAmB,SAACC,GACxBF,IACAG,YAAW,WACTjB,EAASgB,EACX,GAAG,IACL,EAWA,OATAE,EAAAA,EAAAA,YAAU,WAIR,OAHId,GACFF,GAASiB,EAAAA,EAAAA,IAAef,IAEnB,WACLF,GAASkB,EAAAA,EAAAA,MACX,CACF,GAAG,CAAClB,EAAUE,IAEVM,GACFW,EAAAA,OAAAA,SAAeC,EAAAA,EAAAA,IAAeZ,KACvBa,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAI,SAAUC,SAAO,MAItCH,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACJd,YAAaA,EACbe,QAAS,WACPb,EAAiB,SACnB,EAAEc,SAEDpB,GACCc,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,SAAS,YAEjBR,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,QAAS,CAAElB,iBAAAA,MAI3B,C","sources":["components/UsersModalLayout/UsersModalLayout.tsx"],"sourcesContent":["import { Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\nimport Modal from 'components/Modal/';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport {\n  getCertainUser,\n  removeCertainUser,\n  selectUsersList,\n} from 'redux/users';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader';\nimport { Notify } from 'notiflix';\nimport { useModal } from 'hooks';\nimport { translateError } from 'utils';\n\nexport default function UsersModalLayout() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { userId } = useParams();\n  const { isLoading, error } = useAppSelector(selectUsersList);\n  const { isModalOpen, closeModal } = useModal(true);\n\n  const handleCloseModal = (navigateTo: any) => {\n    closeModal();\n    setTimeout(() => {\n      navigate(navigateTo);\n    }, 250);\n  };\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(getCertainUser(userId));\n    }\n    return () => {\n      dispatch(removeCertainUser());\n    };\n  }, [dispatch, userId]);\n\n  if (error) {\n    Notify.failure(translateError(error));\n    return <Navigate to={'/users'} replace />;\n  }\n\n  return (\n    <Modal\n      isModalOpen={isModalOpen}\n      onClose={() => {\n        handleCloseModal('/users');\n      }}\n    >\n      {isLoading ? (\n        <Loader position=\"static\" />\n      ) : (\n        <Outlet context={{ handleCloseModal }} />\n      )}\n    </Modal>\n  );\n}\n"],"names":["UsersModalLayout","navigate","useNavigate","dispatch","useAppDispatch","userId","useParams","_useAppSelector","useAppSelector","selectUsersList","isLoading","error","_useModal","useModal","isModalOpen","closeModal","handleCloseModal","navigateTo","setTimeout","useEffect","getCertainUser","removeCertainUser","Notify","translateError","_jsx","Navigate","to","replace","Modal","onClose","children","Loader","position","Outlet","context"],"sourceRoot":""}