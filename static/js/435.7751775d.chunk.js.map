{"version":3,"file":"static/js/435.7751775d.chunk.js","mappings":"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","sources":["components/PageTitle/PageTitle.styled.ts","components/PageTitle/PageTitle.tsx","components/Users/UserCard/UserCard.tsx","components/Users/UsersList/UsersList.tsx","helpers/schemas/auth/createNewUser.schema.ts","components/Users/CreateUserForm/CreateUserForm.tsx","components/Users/UsersDashboard/UsersDashboard.tsx","pages/UsersPage/UsersPage.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 111px; //TODO: тимчасове число, щоб займало менше місця\n  padding-left: 34px;\n  background: ${props => props.theme.colors.gradientBackground};\n  border-radius: ${props => props.theme.radii.pageTitle};\n`;\n\nexport const Title = styled.h1`\n  color: ${props => props.theme.colors.pageTitleText};\n  font-size: ${props => props.theme.fontSizes.xxl};\n`;\n","import { Title, TitleWrapper } from './PageTitle.styled';\n\ninterface IProps {\n  title: string;\n}\n\nexport default function PageTitle({ title }: IProps) {\n  return (\n    <TitleWrapper>\n      <Title>{title}</Title>\n    </TitleWrapper>\n  );\n}\n","import type { IUser } from 'redux/users';\nimport { Link, useLocation } from 'react-router-dom';\nimport CardMarkup from 'components/CardMarkup';\n\nexport default function UserCard({ _id, email, name, surname, role }: IUser) {\n  const routeLocation = useLocation();\n\n  return (\n    <CardMarkup\n      _id={_id}\n      email={email}\n      name={name}\n      surname={surname}\n      role={role}\n    >\n      <Link to={`${_id}/confirm`} state={{ from: routeLocation }}>\n        видалити\n      </Link>\n      <br />\n      <Link to={`${_id}/form`} state={{ from: routeLocation }}>\n        змінити\n      </Link>\n    </CardMarkup>\n  );\n}\n","import UserCard from 'components/Users/UserCard';\nimport type { IUser } from 'redux/users';\n\ninterface IProps {\n  usersList: IUser[];\n}\n\nexport default function UsersList({ usersList }: IProps) {\n  return (\n    <ul>\n      {usersList.map(item => (\n        <UserCard key={item._id} {...item} />\n      ))}\n    </ul>\n  );\n}\n","import * as Yup from 'yup';\nimport { Roles, USER_ROLES } from 'helpers/constants';\n\nconst createNewUserSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(\n      10,\n      'Електронна пошта занадто коротка - має містити мінімум 10 символів.'\n    )\n    .max(\n      63,\n      'Електронна пошта занадто довга - має містити максимум 63 символів.'\n    )\n    .email('Невалідна пошта')\n    .matches(\n      /^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(.\\w{2,3})+$/,\n      'Будь ласка введіть валідну адресу електронної пошти'\n    )\n    .required(\"Електронна пошта є обов'язковим полем\"),\n  password: Yup.string()\n    .min(7, 'Пароль занадто короткий - має містити мінімум 7 символів.')\n    .max(32, 'Пароль занадтно довгий - має містити максимум 32 символи.')\n    .matches(\n      /^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$/,\n      'Пароль має містити лише: великі літери, маленькі літери та цифри'\n    )\n    .required(\"Пароль є обов'язковим полем\"),\n  confirmPassword: Yup.string().oneOf(\n    [Yup.ref('password'), ''],\n    'Паролі мають співпадати!'\n  ),\n  name: Yup.string()\n    .min(2, \"Ім'я занадто коротке - має містити мінімум 2 символи\")\n    .max(30, \"Ім'я занадтно довге - має містити максимум 30 символів\")\n    .matches(/^([a-zA-Z-А-Яа-яЁёЇїІіЄєҐґ']+)$/, \"Ім'я має містити лише літери\")\n    .required(\"Ім'я є обов'язковим полем\"),\n  surname: Yup.string()\n    .min(2, 'Прізвище занадто коротке - має містити мінімум 2 символів')\n    .max(40, 'Прізвище занадтно довге - має містити максимум 40 символів')\n    .matches(\n      /^([a-zA-Z-А-Яа-яЁёЇїІіЄєҐґ']+)$/,\n      'Прізвище має містити лише літери'\n    )\n    .required(\"Прізвище є обов'язковим полем\"),\n  role: Yup.mixed<Roles>()\n    .oneOf(USER_ROLES)\n    .required(\"Роль нового користувача є обов'язковим полем\"),\n});\n\nexport default createNewUserSchema;\n","import { Field, Form, Formik, ErrorMessage } from 'formik';\nimport createNewUserSchema from 'helpers/schemas/auth/createNewUser.schema';\nimport translateRole from 'utils/translate-role';\nimport { useAppDispatch } from 'hooks';\nimport { registerNewUser } from 'redux/users';\nimport { Roles } from 'helpers/constants';\nimport { useState } from 'react';\nimport { RxEyeClosed, RxEyeOpen } from 'react-icons/rx';\n\ninterface INewUser {\n  email: string;\n  password: string;\n  name: string;\n  surname: string;\n  role: string;\n}\n\ninterface Iprops {\n  onClose: () => void;\n}\n\nconst FORM_INITIAL_STATE: INewUser = {\n  email: '',\n  password: '',\n  name: '',\n  surname: '',\n  role: '',\n};\n\nexport default function CreateUserForm({ onClose }: Iprops) {\n  const [isVisiblePassword, setIsVisiblePassword] = useState(false);\n  const [isVisibleConfirmPassword, setIsVisibleConfirmPassword] =\n    useState(false);\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <h2>Остворити нового користувача</h2>\n      <Formik\n        initialValues={FORM_INITIAL_STATE}\n        onSubmit={(values, actions) => {\n          dispatch(registerNewUser(values));\n          actions.resetForm();\n          onClose();\n        }}\n        validateOnBlur\n        validationSchema={createNewUserSchema}\n      >\n        <Form style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n          <label>\n            Електронна пошта:\n            <Field name=\"email\" type=\"email\" id=\"email\" placeholder=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n          <label>\n            Пароль:\n            <Field\n              name=\"password\"\n              type={isVisiblePassword ? 'text' : 'password'}\n              id=\"password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setIsVisiblePassword(!isVisiblePassword)}\n            >\n              {isVisiblePassword ? <RxEyeClosed /> : <RxEyeOpen />}\n            </button>\n            <ErrorMessage name=\"password\" />\n          </label>\n          <label>\n            Підтвердіть пароль:\n            <Field\n              name=\"confirmPassword\"\n              type={isVisibleConfirmPassword ? 'text' : 'password'}\n              id=\"confirmPassword\"\n            />\n            <button\n              type=\"button\"\n              onClick={() =>\n                setIsVisibleConfirmPassword(!isVisibleConfirmPassword)\n              }\n            >\n              {isVisibleConfirmPassword ? <RxEyeClosed /> : <RxEyeOpen />}\n            </button>\n            <ErrorMessage name=\"confirmPassword\" />\n          </label>\n          <label>\n            Ім'я:\n            <Field name=\"name\" type=\"text\" id=\"name\" />\n            <ErrorMessage name=\"name\" />\n          </label>\n          <label>\n            Прізвище:\n            <Field name=\"surname\" type=\"text\" id=\"surname\" />\n            <ErrorMessage name=\"surname\" />\n          </label>\n          <label style={{ display: 'flex', flexDirection: 'column' }}>\n            Роль нового користувача\n            <label>\n              {translateRole(Roles.admin)}\n              <Field\n                name=\"role\"\n                type=\"radio\"\n                id={Roles.admin}\n                value={Roles.admin}\n              />\n            </label>\n            <label>\n              {translateRole(Roles.applyManager)}\n              <Field\n                name=\"role\"\n                type=\"radio\"\n                id={Roles.applyManager}\n                value={Roles.applyManager}\n              />\n            </label>\n            <label>\n              {translateRole(Roles.servicesManager)}\n              <Field\n                name=\"role\"\n                type=\"radio\"\n                id={Roles.servicesManager}\n                value={Roles.servicesManager}\n              />\n            </label>\n            <label>\n              {translateRole(Roles.productsManager)}\n              <Field\n                name=\"role\"\n                type=\"radio\"\n                id={Roles.productsManager}\n                value={Roles.productsManager}\n              />\n            </label>\n            <ErrorMessage name=\"role\" />\n          </label>\n          <button type=\"submit\">Створити нового користувача</button>\n        </Form>\n      </Formik>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { getAllUsers } from 'redux/users/operations';\nimport { selectUsersList } from 'redux/users';\nimport UsersList from 'components/Users/UsersList';\nimport Modal from 'components/Modal';\nimport CreateUserForm from 'components/Users/CreateUserForm';\n\nexport default function UsersDashboard() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useAppDispatch();\n  const { entities } = useAppSelector(selectUsersList);\n\n  useEffect(() => {\n    dispatch(getAllUsers());\n  }, [dispatch]);\n\n  return (\n    <section style={{ position: 'relative' }}>\n      <>\n        <ul>\n          <li>Користувач</li>\n          <li>Роль</li>\n          <li>Опціі</li>\n        </ul>\n        {entities?.length ? (\n          <UsersList usersList={entities} />\n        ) : (\n          <h2>There arent any users</h2>\n        )}\n        <button type=\"button\" onClick={() => setIsModalOpen(true)}>\n          Створити нового користувача\n        </button>\n        {isModalOpen && (\n          <Modal onClose={() => setIsModalOpen(false)}>\n            <CreateUserForm onClose={() => setIsModalOpen(false)} />\n          </Modal>\n        )}\n      </>\n    </section>\n  );\n}\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport PageTitle from 'components/PageTitle';\nimport UsersDashboard from 'components/Users/UsersDashboard';\nimport Loader from 'components/Loader';\n\nexport default function UsersPage() {\n  return (\n    <>\n      <PageTitle title=\"Користувачі\" />\n      <UsersDashboard />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["TitleWrapper","styled","_templateObject","_taggedTemplateLiteral","props","theme","colors","gradientBackground","radii","pageTitle","Title","_templateObject2","pageTitleText","fontSizes","xxl","PageTitle","_ref","title","_jsx","children","UserCard","_id","email","name","surname","role","routeLocation","useLocation","_jsxs","CardMarkup","Link","to","concat","state","from","UsersList","usersList","map","item","_objectSpread","Yup","shape","min","max","matches","required","password","confirmPassword","oneOf","USER_ROLES","FORM_INITIAL_STATE","CreateUserForm","onClose","_useState","useState","_useState2","_slicedToArray","isVisiblePassword","setIsVisiblePassword","_useState3","_useState4","isVisibleConfirmPassword","setIsVisibleConfirmPassword","dispatch","useAppDispatch","_Fragment","Formik","initialValues","onSubmit","values","actions","registerNewUser","resetForm","validateOnBlur","validationSchema","createNewUserSchema","Form","style","display","flexDirection","gap","Field","type","id","placeholder","ErrorMessage","onClick","RxEyeClosed","RxEyeOpen","translateRole","Roles","value","UsersDashboard","isModalOpen","setIsModalOpen","entities","useAppSelector","selectUsersList","useEffect","getAllUsers","position","length","Modal","UsersPage","Suspense","fallback","Loader","Outlet"],"sourceRoot":""}