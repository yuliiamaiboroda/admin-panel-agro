{"version":3,"file":"static/js/872.3673aac2.chunk.js","mappings":"0PAae,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAA6BC,EAAAA,EAAAA,IAAeC,EAAAA,IAApCC,EAAKH,EAALG,MAAOC,EAASJ,EAATI,UACfC,GAAsCC,EAAAA,EAAAA,MAA9BC,EAAYF,EAAZE,aAAcC,EAAWH,EAAXG,YACtBC,GAAoCC,EAAAA,EAAAA,KAAS,GAArCC,EAAWF,EAAXE,YAAaC,EAAUH,EAAVG,WAEfC,EAAmB,SAACC,GACxBF,IACAG,YAAW,WACTnB,EAASkB,EACX,GAAG,IACL,EAWA,OATAE,EAAAA,EAAAA,YAAU,WAIR,OAHIR,GACFV,GAASmB,EAAAA,EAAAA,IAAkBT,IAEtB,WACLV,GAASoB,EAAAA,EAAAA,MACX,CACF,GAAG,CAACV,EAAaV,IAEbK,GACFgB,EAAAA,OAAAA,QAAehB,IACRiB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAE,cAAAC,OAAgBhB,GAAgB,IAAMiB,SAAO,MAIhEJ,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJd,YAAaA,EACbe,QAAS,WACPb,EAAiB,cAADU,OAAehB,GAAgB,IACjD,EAAEoB,SAEDvB,GAAYgB,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,KAAMR,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,QAAS,CAAEjB,iBAAAA,MAGnD,C","sources":["components/VacanciesModalLayout/VacanciesModalLayout.tsx"],"sourcesContent":["import { Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\nimport Modal from 'components/Modal/';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport {\n  getCertainVacancy,\n  removeCertainVacancy,\n  selectVacancies,\n} from 'redux/vacancies';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport { useModal } from 'hooks';\n\nexport default function VacanciesModalLayout() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { error, isLoading } = useAppSelector(selectVacancies);\n  const { categoryName, vacanciesId } = useParams();\n  const { isModalOpen, closeModal } = useModal(true);\n\n  const handleCloseModal = (navigateTo: any) => {\n    closeModal();\n    setTimeout(() => {\n      navigate(navigateTo);\n    }, 250);\n  };\n\n  useEffect(() => {\n    if (vacanciesId) {\n      dispatch(getCertainVacancy(vacanciesId));\n    }\n    return () => {\n      dispatch(removeCertainVacancy());\n    };\n  }, [vacanciesId, dispatch]);\n\n  if (error) {\n    Notify.failure(error);\n    return <Navigate to={`/vacancies/${categoryName || ''}`} replace />;\n  }\n\n  return (\n    <Modal\n      isModalOpen={isModalOpen}\n      onClose={() => {\n        handleCloseModal(`/vacancies/${categoryName || ''}`);\n      }}\n    >\n      {isLoading ? <Loader /> : <Outlet context={{ handleCloseModal }} />}\n    </Modal>\n  );\n}\n"],"names":["VacanciesModalLayout","navigate","useNavigate","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectVacancies","error","isLoading","_useParams","useParams","categoryName","vacanciesId","_useModal","useModal","isModalOpen","closeModal","handleCloseModal","navigateTo","setTimeout","useEffect","getCertainVacancy","removeCertainVacancy","Notify","_jsx","Navigate","to","concat","replace","Modal","onClose","children","Loader","Outlet","context"],"sourceRoot":""}