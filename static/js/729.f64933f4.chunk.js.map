{"version":3,"file":"static/js/729.f64933f4.chunk.js","mappings":"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","sources":["components/PageTitle/PageTitle.styled.ts","components/PageTitle/PageTitle.tsx","components/ResumeCard/ResumeCard.tsx","components/ResumesGallery/ResumesGallery.tsx","helpers/schemas/resumes/index.ts","components/ResumeForm/ResumeForm.tsx","components/ResumesFilter/ResumesFilter.tsx","pages/ResumesPage/ResumesPage.tsx"],"sourcesContent":["import { devices } from 'helpers/constants';\nimport styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  height: 100px;\n  display: flex;\n  align-items: center;\n  padding: ${p => p.theme.space[6]}px ${p => p.theme.space[8]}px;\n  background: ${props => props.theme.colors.gradientBackground};\n  border-radius: ${props => props.theme.radii.pageTitle};\n  \n  @media ${devices.tablet} { \n    height: 150px;\n  }\n  \n  @media ${devices.desktop} { \n    height: 234px;\n  }\n\n`;\n\nexport const Title = styled.h1`\n  color: ${props => props.theme.colors.pageTitleText};\n  font-size: ${props => props.theme.fontSizes.xl}px;\n  \n  @media ${devices.desktop} { \n    font-size: ${props => props.theme.fontSizes.xxl}px;\n  }\n`;\n","import { Title, TitleWrapper } from './PageTitle.styled';\n\ninterface IProps {\n  title: string;\n}\n\nexport default function PageTitle({ title }: IProps) {\n  return (\n    <TitleWrapper>\n      <Title>{title}</Title>\n    </TitleWrapper>\n  );\n}\n","import { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppDispatch } from 'hooks';\nimport { updateResumeViews, updateResumeIsFavorite } from 'redux/resumes';\nimport type { IResumeEntity } from 'helpers/types';\nimport CardWrapperMarkup from 'components/CardWrapperMarkup';\nimport CardTitleStringMarkup from 'components/CardTitleStringMarkup';\nimport CardDetailStringMarkup from 'components/CardDetailStringMarkup';\nimport CardButton from 'components/CardButton';\nimport Box from 'components/Box';\nimport FavoriteButton from 'components/FavoriteButton';\n\nexport default function ResumeCard({\n  _id,\n  name,\n  position,\n  comment,\n  isFavorite,\n  isReviewed,\n}: IResumeEntity) {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n\n  const handleUpdateViews = () => {\n    if (!isReviewed) {\n      dispatch(updateResumeViews(_id));\n    }\n  };\n\n  const clickHandler = (event: React.MouseEvent) => {\n    if (\n      !(event.target instanceof HTMLAnchorElement) &&\n      !(event.target instanceof HTMLButtonElement)\n    ) {\n      handleUpdateViews();\n      navigate(`${_id}${location.search}`, { state: location });\n    }\n    return;\n  };\n\n  return (\n    <CardWrapperMarkup onClick={() => clickHandler}>\n      {!isReviewed && <CardDetailStringMarkup value=\"New!!!\" />}\n      <CardTitleStringMarkup value={name} />\n      <CardDetailStringMarkup title=\"Позиція\" value={position} />\n      <CardDetailStringMarkup title=\"Коментар\" value={comment} />\n      <Box display=\"flex\" justifyContent=\"center\" gridGap={2}>\n        <FavoriteButton\n          isFavorite={isFavorite}\n          onClick={() => dispatch(updateResumeIsFavorite(_id))}\n        />\n        <CardButton type=\"remove\" navigateTo={`${_id}/confirm`} />\n      </Box>\n    </CardWrapperMarkup>\n  );\n}\n","import { useAppSelector, useAppDispatch, useQueryParams } from 'hooks';\nimport {\n  selectResumes,\n  selectResumePagination,\n  loadMoreResumes,\n} from 'redux/resumes';\nimport ResumeCard from 'components/ResumeCard';\nimport GalleryWrapper from 'components/GalleryWrapper';\n\nexport default function ResumesGallery() {\n  const [queryParams] = useQueryParams();\n  const resumes = useAppSelector(selectResumes);\n  const pagination = useAppSelector(selectResumePagination);\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <GalleryWrapper>\n        {resumes.map(resume => (\n          <ResumeCard key={resume._id} {...resume} />\n        ))}\n      </GalleryWrapper>\n      {resumes.length < pagination.total ? (\n        <button\n          type=\"button\"\n          onClick={() =>\n            dispatch(\n              loadMoreResumes({\n                ...queryParams,\n                skip: pagination.skip + pagination.limit,\n              })\n            )\n          }\n        >\n          Load more\n        </button>\n      ) : null}\n    </>\n  );\n}\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { fileFormat, fileSize } from 'utils';\n\nexport const resumeShema = (fileField: React.RefObject<HTMLInputElement>) =>\n  Yup.object({\n    name: Yup.string().trim().min(2).max(62).required(),\n    phone: Yup.string()\n      .trim()\n      .matches(\n        /^\\+380\\d{9}$/,\n        'Phone should containe +380 and another 9 numbers'\n      )\n      .required(),\n    email: Yup.string()\n      .trim()\n      .matches(\n        /^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(.\\w{2,3})+$/,\n        'Поле електронної пошти повинно містити тільки: латинські літери, цифри та знаки, на початку або в кінці електронної пошти не може бути дефіс, перед (@) повинно бути не менше 2 символів.'\n      )\n      .required(),\n    position: Yup.string()\n      .trim()\n      // TODO:  discus about validation of position field\n      .matches(\n        /^(?![-' ]+$)[a-zA-Zа-яА-ЯіІїЇєЄ0-9-'‘ʼ,./ ]+$/,\n        'Поле позиції повинно містити тільки: латинські літери, цифри, дефіси та апостроф'\n      )\n      .min(2)\n      .max(62)\n      .required(),\n    resume: Yup.mixed()\n      .test(\n        'is-corrent-forat',\n        'Резюме повине буди в форматі pdf',\n        fileFormat(fileField, ['pdf'])\n      )\n      .test(\n        'is-correct-size',\n        'Розмір файлу не повинен перевищувати 5Mb',\n        fileSize(fileField, 5)\n      ),\n    comment: Yup.string().trim().min(2).max(2000).required(),\n    agreement: Yup.bool()\n      .oneOf([true], 'Agreement should be checked')\n      .required(),\n  });\n","import { useRef, useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport { createResume } from 'redux/resumes';\nimport { getAllVacancyTitles, selectVacancyTitles } from 'redux/vacancies';\nimport { resumeShema } from 'helpers/schemas/resumes';\nimport UploadFileField from 'components/UploadFileField';\n\ninterface IProps {\n  onSubmit?: () => void;\n}\n\nexport default function ResumeForm({ onSubmit }: IProps) {\n  const fileField = useRef<HTMLInputElement>(null);\n  const vacancies = useAppSelector(selectVacancyTitles);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getAllVacancyTitles());\n  }, [dispatch]);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '+380',\n        email: '',\n        position: '',\n        resume: '',\n        comment: '',\n        agreement: false,\n      }}\n      validationSchema={resumeShema(fileField)}\n      onSubmit={(\n        { name, phone, email, position, comment, agreement },\n        action\n      ) => {\n        dispatch(\n          createResume({\n            name,\n            phone,\n            email,\n            position,\n            comment,\n            agreement,\n            resume: fileField.current?.files\n              ? fileField.current?.files[0]\n              : null,\n          })\n        );\n        action.resetForm();\n        if (onSubmit) {\n          onSubmit();\n        }\n      }}\n    >\n      {({ values, setFieldValue }) => (\n        <Form>\n          <label>\n            Name: <Field id=\"name\" name=\"name\" type=\"text\" />\n            <ErrorMessage name=\"name\" />\n          </label>\n          <br />\n          <label>\n            Phone: <Field id=\"phone\" name=\"phone\" type=\"text\" />\n            <ErrorMessage name=\"phone\" />\n          </label>\n          <br />\n          <label>\n            Email: <Field id=\"email\" name=\"email\" type=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n          <br />\n          <label>\n            Position:\n            <select\n              name=\"position\"\n              id=\"position\"\n              value={values.position}\n              onChange={event => setFieldValue('position', event.target.value)}\n            >\n              <option value=\"\">Оберіть вакансію</option>\n              {vacancies.map(({ _id, title }) => (\n                <option key={_id} value={title}>\n                  {title}\n                </option>\n              ))}\n              <option value=\"other\">Інше</option>\n            </select>\n            <ErrorMessage name=\"position\" />\n          </label>\n          <br />\n          <UploadFileField name=\"resume\" fileRef={fileField} />\n          <br />\n          <label>\n            Comment: <Field id=\"comment\" name=\"comment\" type=\"text\" />\n            <ErrorMessage name=\"comment\" />\n          </label>\n          <br />\n          <label>\n            Agreement: <Field id=\"agreement\" name=\"agreement\" type=\"checkbox\" />\n            <ErrorMessage name=\"agreement\" />\n          </label>\n          <br />\n          <button type=\"submit\" disabled={!values.agreement}>\n            Add resume\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector, useQueryParams } from 'hooks';\nimport { getAllResumes } from 'redux/resumes';\nimport { getAllVacancyTitles, selectVacancyTitles } from 'redux/vacancies';\n\nconst LIMIT = [\n  { value: '2', label: 2 },\n  { value: '5', label: 5 },\n  { value: '10', label: 10 },\n  { value: '15', label: 15 },\n  { value: '', label: 20 },\n  { value: '25', label: 25 },\n  { value: '30', label: 30 },\n  { value: '40', label: 40 },\n  { value: '50', label: 50 },\n];\n\nexport default function ResumesFilter() {\n  const [queryParams, setQueryParams] = useQueryParams();\n  const titles = useAppSelector(selectVacancyTitles);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getAllVacancyTitles());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(getAllResumes(queryParams));\n  }, [dispatch, queryParams]);\n\n  return (\n    <>\n      <label>\n        Show favorites\n        <input\n          type=\"checkbox\"\n          name=\"isFavorite\"\n          checked={queryParams.isFavorite ? true : false}\n          onChange={({ target }) =>\n            setQueryParams({ isFavorite: target.checked ? 'true' : '' })\n          }\n        />\n      </label>\n      <select\n        onChange={({ target }) => setQueryParams({ position: target.value })}\n        value={queryParams.position ? queryParams.position : ''}\n      >\n        <option value=\"\">All</option>\n        {titles.map(({ _id, title }) => (\n          <option key={_id} value={title}>\n            {title}\n          </option>\n        ))}\n        <option value=\"other\">Other</option>\n      </select>\n      <select\n        onChange={({ target }) => setQueryParams({ sort: target.value })}\n        value={queryParams.sort ? queryParams.sort : ''}\n      >\n        <option value=\"\">Newer</option>\n        <option value=\"asc\">Older</option>\n      </select>\n      <select\n        onChange={({ target }) => setQueryParams({ limit: target.value })}\n        value={queryParams.limit ? queryParams.limit : ''}\n      >\n        {LIMIT.map(({ value, label }, index) => (\n          <option key={index} value={value}>\n            {label}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n}\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { useAppSelector, useModal } from 'hooks';\nimport { selectResumeError } from 'redux/resumes';\nimport ResumesGallery from 'components/ResumesGallery';\nimport Modal from 'components/Modal';\nimport ResumeForm from 'components/ResumeForm';\nimport ResumesFilter from 'components/ResumesFilter';\nimport Loader from 'components/Loader';\nimport PageTitle from 'components/PageTitle';\nimport CreateButton from 'components/CreateButton';\n\nexport default function ResumesPage() {\n  const { isModalOpen, openModal, closeModal } = useModal();\n  const error = useAppSelector(selectResumeError);\n\n  if (error) {\n    Notify.failure(error);\n    return (\n      <>\n        <h1>Resumes page</h1>\n        <h2>Ooops... Something went wrong</h2>\n        <h3>It seems like: {error}</h3>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <PageTitle title=\"Резюме\" />\n      <ResumesFilter />\n      <CreateButton onClick={openModal} />\n      <ResumesGallery />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <ResumeForm onSubmit={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"names":["TitleWrapper","styled","_templateObject","_taggedTemplateLiteral","p","theme","space","props","colors","gradientBackground","radii","pageTitle","devices","Title","_templateObject2","pageTitleText","fontSizes","xl","xxl","PageTitle","_ref","title","_jsx","children","ResumeCard","_id","name","position","comment","isFavorite","isReviewed","navigate","useNavigate","dispatch","useAppDispatch","location","useLocation","clickHandler","event","target","HTMLAnchorElement","HTMLButtonElement","updateResumeViews","concat","search","state","_jsxs","CardWrapperMarkup","onClick","CardDetailStringMarkup","value","CardTitleStringMarkup","Box","display","justifyContent","gridGap","FavoriteButton","updateResumeIsFavorite","CardButton","type","navigateTo","ResumesGallery","_useQueryParams","useQueryParams","queryParams","_slicedToArray","resumes","useAppSelector","selectResumes","pagination","selectResumePagination","_Fragment","GalleryWrapper","map","resume","_objectSpread","length","total","loadMoreResumes","skip","limit","resumeShema","fileField","Yup","trim","min","max","required","phone","matches","email","test","fileFormat","fileSize","agreement","oneOf","ResumeForm","onSubmit","useRef","vacancies","selectVacancyTitles","useEffect","getAllVacancyTitles","Formik","initialValues","validationSchema","_ref2","action","_fileField$current","_fileField$current2","createResume","current","files","resetForm","_ref3","values","setFieldValue","Form","Field","id","ErrorMessage","onChange","_ref4","UploadFileField","fileRef","disabled","LIMIT","label","ResumesFilter","_useQueryParams2","setQueryParams","titles","getAllResumes","checked","sort","_ref5","_ref6","index","ResumesPage","_useModal","useModal","isModalOpen","openModal","closeModal","error","selectResumeError","Notify","CreateButton","Suspense","fallback","Loader","Outlet","Modal","onClose"],"sourceRoot":""}