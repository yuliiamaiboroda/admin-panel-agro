{"version":3,"file":"static/js/872.cd72f351.chunk.js","mappings":"oQAce,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAA6BC,EAAAA,EAAAA,IAAeC,EAAAA,IAApCC,EAAKH,EAALG,MAAOC,EAASJ,EAATI,UACfC,GAAsCC,EAAAA,EAAAA,MAA9BC,EAAYF,EAAZE,aAAcC,EAAWH,EAAXG,YACtBC,GAAoCC,EAAAA,EAAAA,KAAS,GAArCC,EAAWF,EAAXE,YAAaC,EAAUH,EAAVG,WAEfC,EAAmB,SAACC,GACxBF,IACAG,YAAW,WACTnB,EAASkB,EACX,GAAG,IACL,EAWA,OATAE,EAAAA,EAAAA,YAAU,WAIR,OAHIR,GACFV,GAASmB,EAAAA,EAAAA,IAAeT,IAEnB,WACLV,GAASoB,EAAAA,EAAAA,MACX,CACF,GAAG,CAACV,EAAaV,IAEbK,GACFgB,EAAAA,OAAAA,SAAeC,EAAAA,EAAAA,IAAejB,KACvBkB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAE,cAAAC,OAAgBjB,GAAgB,IAAMkB,SAAO,MAIhEJ,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJf,YAAaA,EACbgB,QAAS,WACPd,EAAiB,cAADW,OAAejB,GAAgB,IACjD,EAAEqB,SAEDxB,GACCiB,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACC,SAAS,YAEjBT,EAAAA,EAAAA,KAACU,EAAAA,GAAM,CAACC,QAAS,CAAEnB,iBAAAA,MAI3B,C","sources":["components/VacanciesModalLayout/VacanciesModalLayout.tsx"],"sourcesContent":["import { Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\nimport Modal from 'components/Modal/';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport {\n  getVacancyById,\n  removeCertainVacancy,\n  selectVacancies,\n} from 'redux/vacancies';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport { useModal } from 'hooks';\nimport { translateError } from 'utils';\n\nexport default function VacanciesModalLayout() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { error, isLoading } = useAppSelector(selectVacancies);\n  const { categoryName, vacanciesId } = useParams();\n  const { isModalOpen, closeModal } = useModal(true);\n\n  const handleCloseModal = (navigateTo: any) => {\n    closeModal();\n    setTimeout(() => {\n      navigate(navigateTo);\n    }, 250);\n  };\n\n  useEffect(() => {\n    if (vacanciesId) {\n      dispatch(getVacancyById(vacanciesId));\n    }\n    return () => {\n      dispatch(removeCertainVacancy());\n    };\n  }, [vacanciesId, dispatch]);\n\n  if (error) {\n    Notify.failure(translateError(error));\n    return <Navigate to={`/vacancies/${categoryName || ''}`} replace />;\n  }\n\n  return (\n    <Modal\n      isModalOpen={isModalOpen}\n      onClose={() => {\n        handleCloseModal(`/vacancies/${categoryName || ''}`);\n      }}\n    >\n      {isLoading ? (\n        <Loader position=\"static\" />\n      ) : (\n        <Outlet context={{ handleCloseModal }} />\n      )}\n    </Modal>\n  );\n}\n"],"names":["VacanciesModalLayout","navigate","useNavigate","dispatch","useAppDispatch","_useAppSelector","useAppSelector","selectVacancies","error","isLoading","_useParams","useParams","categoryName","vacanciesId","_useModal","useModal","isModalOpen","closeModal","handleCloseModal","navigateTo","setTimeout","useEffect","getVacancyById","removeCertainVacancy","Notify","translateError","_jsx","Navigate","to","concat","replace","Modal","onClose","children","Loader","position","Outlet","context"],"sourceRoot":""}