{"version":3,"file":"static/js/208.f6f8333b.chunk.js","mappings":"oQAee,SAASA,IACtB,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBC,GAAYF,EAAAA,EAAAA,IAAeG,EAAAA,IACjCC,GAAoCC,EAAAA,EAAAA,KAAS,GAArCC,EAAWF,EAAXE,YAAaC,EAAUH,EAAVG,WAEfC,EAAmB,SAACC,GACxBF,IACAG,YAAW,WACTf,EAASc,EACX,GAAG,IACL,GAEAE,EAAAA,EAAAA,YAAU,WAKR,OAJIlB,GACFI,GAASe,EAAAA,EAAAA,IAAiBnB,IAGrB,WACLI,GAASgB,EAAAA,EAAAA,MACX,CACF,GAAG,CAAChB,EAAUJ,IAEd,IAAMqB,EAAe,WAErB,OAAIf,GACFgB,EAAAA,OAAAA,SAAeC,EAAAA,EAAAA,IAAejB,KACvBkB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIL,EAAcM,SAAO,MAI1CH,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACJf,YAAaA,EACbgB,QAAS,WACPd,EAAiBM,EACnB,EAAES,SAEDrB,GACCe,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,SAAS,YAEjBR,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,QAAS,CAAEnB,iBAAAA,MAI3B,C","sources":["components/ResumeModalLayout/ResumeModalLayout.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { Outlet, useNavigate, useParams, Navigate } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { useAppDispatch, useAppSelector } from 'hooks';\nimport {\n  getCertainResume,\n  removeCertainResume,\n  selectResumeError,\n  selectResumeLoading,\n} from 'redux/resumes';\nimport Modal from 'components/Modal/Modal';\nimport { useModal } from 'hooks';\nimport { translateError } from 'utils';\nimport Loader from 'components/Loader';\n\nexport default function ResumeModalLayout() {\n  const { resumeId } = useParams();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const error = useAppSelector(selectResumeError);\n  const isLoading = useAppSelector(selectResumeLoading);\n  const { isModalOpen, closeModal } = useModal(true);\n\n  const handleCloseModal = (navigateTo: any) => {\n    closeModal();\n    setTimeout(() => {\n      navigate(navigateTo);\n    }, 250);\n  };\n\n  useEffect(() => {\n    if (resumeId) {\n      dispatch(getCertainResume(resumeId));\n    }\n\n    return () => {\n      dispatch(removeCertainResume());\n    };\n  }, [dispatch, resumeId]);\n\n  const backLinkHref = '/resumes';\n\n  if (error) {\n    Notify.failure(translateError(error));\n    return <Navigate to={backLinkHref} replace />;\n  }\n\n  return (\n    <Modal\n      isModalOpen={isModalOpen}\n      onClose={() => {\n        handleCloseModal(backLinkHref);\n      }}\n    >\n      {isLoading ? (\n        <Loader position=\"static\" />\n      ) : (\n        <Outlet context={{ handleCloseModal }} />\n      )}\n    </Modal>\n  );\n}\n"],"names":["ResumeModalLayout","resumeId","useParams","navigate","useNavigate","dispatch","useAppDispatch","error","useAppSelector","selectResumeError","isLoading","selectResumeLoading","_useModal","useModal","isModalOpen","closeModal","handleCloseModal","navigateTo","setTimeout","useEffect","getCertainResume","removeCertainResume","backLinkHref","Notify","translateError","_jsx","Navigate","to","replace","Modal","onClose","children","Loader","position","Outlet","context"],"sourceRoot":""}